import{_ as a,o as t,c as e,V as s}from"./chunks/framework.7caa47d6.js";const f=JSON.parse('{"title":"How to get datas","description":"","frontmatter":{},"headers":[],"relativePath":"resources/datas.md","filePath":"resources/datas.md"}'),o={name:"resources/datas.md"},n=s(`<h1 id="how-to-get-datas" tabindex="-1">How to get datas <a class="header-anchor" href="#how-to-get-datas" aria-label="Permalink to &quot;How to get datas&quot;">​</a></h1><p>As you have probably already seen, when you define a data via <code>datas[&#39;name&#39;]</code> or <code>datas.name</code> you can retrieve this data in a component as follows: <code>x-text=&quot;name&quot; </code>.</p><h2 id="what-can-we-put-in-the-x-attributes" tabindex="-1">What can we put in the x-attributes ? <a class="header-anchor" href="#what-can-we-put-in-the-x-attributes" aria-label="Permalink to &quot;What can we put in the x-attributes ?&quot;">​</a></h2><p>Attributes can only contain paths, the only accepted separator is the <code>.</code> and it is optionally possible to specify a negation indicator <code>!</code> at the beginning of the path.</p><p>Attributes do not contain javascript expressions, this implies that the following are invalid:</p><ul><li>Comparison operators</li><li>Assignment operators</li><li>Functions and parameters</li><li>Etc...</li></ul><h2 id="match-binding" tabindex="-1">Match binding <a class="header-anchor" href="#match-binding" aria-label="Permalink to &quot;Match binding&quot;">​</a></h2><p>It is also possible to specify a string containing one or more datas inside braces: <code>x-text=&quot;My name is {name}&quot;</code>. Note that the return value will then always be a string (which is not suitable for <a href="./actions.html">actions</a> or <a href="./attributes.html">specific attributes</a> like <code>x-show</code>, <code>x-append</code>, etc...).</p><h2 id="the-filters" tabindex="-1">The filters <a class="header-anchor" href="#the-filters" aria-label="Permalink to &quot;The filters&quot;">​</a></h2><p>It is possible to specify <a href="./methods.html#thisfilter">filters</a> (if they have been defined beforehand) in order to modify the return value: <code>x-text=&quot;name|capitalize&quot;</code>.</p><h2 id="the-depth" tabindex="-1">The depth <a class="header-anchor" href="#the-depth" aria-label="Permalink to &quot;The depth&quot;">​</a></h2><p>Each property of your data is readable from the attributes. For the array <code>datas.array = [&#39;john&#39;, &#39;jane&#39;, &#39;jack&#39;]</code> you can get <code>jane</code> like this: <code>x-text=&quot;array.1&quot;</code>.</p><p>You can also access the array length like this: <code>x-text=&quot;array.length&quot;</code>.</p><p>You may notice that <code>x-text=&quot;array[1]&quot;</code> will not work, because the string defined in the attributes is not the equivalent of an expression in javascript, only <code>.</code> are accepted as separators.</p><h2 id="the-negation" tabindex="-1">The negation <a class="header-anchor" href="#the-negation" aria-label="Permalink to &quot;The negation&quot;">​</a></h2><p>You can specify a negation flag by putting a <code>!</code> at the beginning of the path in the attribute.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cart</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">datas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">render</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">datas</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">products</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">(</span><span style="color:#676E95;font-style:italic;">/*html*/</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;div x-show=&quot;products.length&quot;&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">            Product list here !</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;div x-show=&quot;!products.length&quot;&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">            You don&#39;t have any product in your cart...</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div>`,17),l=[n];function i(r,p,c,d,h,u){return t(),e("div",null,l)}const b=a(o,[["render",i]]);export{f as __pageData,b as default};
