import{_ as s,o as a,c as n,V as o}from"./chunks/framework.7caa47d6.js";const h=JSON.parse('{"title":"List of renderFunction methods","description":"","frontmatter":{},"headers":[],"relativePath":"resources/methods.md","filePath":"resources/methods.md"}'),t={name:"resources/methods.md"},e=o(`<h1 id="list-of-renderfunction-methods" tabindex="-1">List of renderFunction methods <a class="header-anchor" href="#list-of-renderfunction-methods" aria-label="Permalink to &quot;List of renderFunction methods&quot;">​</a></h1><h2 id="this-ref" tabindex="-1">this.ref <a class="header-anchor" href="#this-ref" aria-label="Permalink to &quot;this.ref&quot;">​</a></h2><p><code>this.ref(name)</code> return the first matching element with attribute <code>ref=&quot;name&quot;</code>.</p><h2 id="this-refs" tabindex="-1">this.refs <a class="header-anchor" href="#this-refs" aria-label="Permalink to &quot;this.refs&quot;">​</a></h2><p><code>this.refs(name)</code> return an array of all matching element with attribute <code>ref=&quot;name&quot;</code>.</p><h2 id="this-effect" tabindex="-1">this.effect <a class="header-anchor" href="#this-effect" aria-label="Permalink to &quot;this.effect&quot;">​</a></h2><p><code>this.effect(name, function)</code> add an effect when detecting change on a dynamic data. Effects are the basis of variable dynamism and are used internally by Flect.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">datas</span><span style="color:#89DDFF;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">datas</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">datas</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">countText</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">datas</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">++,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">effect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">datas</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">countText</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Counter score is :</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// watch changes on datas[&#39;count&#39;] and pass it&#39;s value to parametter</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="this-flat" tabindex="-1">this.flat <a class="header-anchor" href="#this-flat" aria-label="Permalink to &quot;this.flat&quot;">​</a></h2><p><code>this.flat(name, object)</code> distribute all the properties of an object into the dynamic datas of the component. To understand its usefulness, it must be understood that by default only first-level data is dynamic and accessible in HTML, <a href="/doc/resources/datas.html">Learn more here</a>.</p><p>The <code>object</code> parametter is optionnal, if you dont specify it, it will try to find the object corresponding to <code>datas[name]</code>.</p><h2 id="this-custom" tabindex="-1">this.custom <a class="header-anchor" href="#this-custom" aria-label="Permalink to &quot;this.custom&quot;">​</a></h2><p>It is an empty object which allows to store your own data/functions related to the component.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">datas</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">custom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">txt</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">log :</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">txt</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/*html*/</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;div onclick=&quot;this.component.custom.log(&#39;hello&#39;)&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,14),l=[e];function p(c,r,i,y,F,D){return a(),n("div",null,l)}const f=s(t,[["render",p]]);export{h as __pageData,f as default};
